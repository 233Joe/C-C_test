1. 预处理 -> 头文件展开/宏替换/条件编译/去掉注释
list.i
2. 编译    -> 检查语法，生成汇编代码
list.s
3. 汇编    -> 汇编代码转成二进制的机器码
list.o
4. 链接    -> 将两个目标文件链接到一起

c++中一般不推荐使用NULL ，一般使用nullptr更好
	NULL在C++会被转换为整形0，而nullptr会被转换为指针0

this
{
  this是一个隐藏的指针，是存在栈上的
  每一个对象都能通过 this 指针来访问自己的地址。
  静态成员函数没有this指针，无法调用非静态成员函数
}



cout 的类型为 ostream
cin    的类型为istream


输入输出转换进制  (转换后一直有效)
{
  hex为十六进制，oct为八进制，dec为十进制
}


访问限定符
{
 类的定义方法
  	class 类名  (默认为私有(private)) / struct 类名(默认为公有(public))

 public:	在类内里定义为公有,在类内外都可以使用
 private:	在类里外为私有，只有在类里面才可以使用
}

构造函数/析构函数
{
  构造函数
    构造函数为类内的函数，它会在每次创建类的新对象时执行。
    构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。
    构造函数可用于为某些成员变量设置初始值。

  析构函数
    析构函数的名称与类的名称是完全相同的，只是在前面加了个（~）作为前缀，也不能带有任何参数。
    析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。
}


缺省参数
{
 void Func（int a = 0);  调用函数若未传值则用该参数
 
 void Func（int a = 0, int b = 10, int c = 20）;全缺省

 void Func（int a, int b, int c = 20）;半全缺省
 必须从右往左连续缺省
}


运算符重载
{

  (返回类型) operator==(d1, d2)(运算符有几个操作数这里就有几个);
          调用 d1 == d2 或 oprator==(d1, d2)

}


函数重载
{
 函数名相同，参数不同
(类型不同）		调用 
 void Add(int a, int b);	Add(1, 2); 
 void Add(long a, int b);	Add(1L, 2); 

 (顺序不同)
 void Add(int a, int b);
 void Add(int b, int a);

 (个数不同)
 void Add(int a, int b);
 void Add(int a, int b, int c);
}


